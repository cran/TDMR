# Experimental research in evolutionary computation
# author: thomas.bartz-beielstein@fh-koeln.de
# http://www.springer.com/3-540-32026-1
#
# Copyright (C) 2009 T. Bartz-Beielstein and C. Lasarczyk
# This program is free software;
# you can redistribute it and/or modify it under the terms of the 
# GNU General Public License as published by the Free Software Foundation; 
# either version 3 of the License,
# or (at your option) any later version.
# This program is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
# See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along
#  with this program; if not, see <http://www.gnu.org/licenses/>.
#
###########################################################
# SPOT configuration file
# Settings from this file overwrite default settings specified in 
# spotGetOptions.R
###########################################################
# Part I:  Algorithm dependent settings
# 
###########################################################
## Specify name of the algorithm to be tuned.
alg.func = "tdmStartSpot"

## Column name containing results
alg.resultColumn = "Y"
## seed setting for to be used in the users algorithm
alg.seed = 1

io.apdFileName = "sonar_01.apd"
io.roiFileName = "sonar_01.roi"


##########################################################
# SPOT Global parameter
###########################################################
spot.ocba = F; spot.seed = 1 # 125
#io.columnSep = "";     # /WK/ changed from columnSep = " ", which may give problems when reading ROI-file with more than one whitespace as separator
io.verbosity = 0;       # =3 print much & do updating graphics, =0: print (nearly) nothing


###########################################################
# Part II: SPOT Steps related
##########################################################
# STEP auto
###########################################################
# used in spotStepAuto:
auto.loop.steps = 50;     # number of spot metamodels to be generated 
auto.loop.nevals = 150;   # concurrently, max number of algo evaluations may be specified

##########################################################
# STEP initial
###########################################################
# FOO: used by spotStepInitial to create an initial design
# expected a function name that also exists as R-filename
#init.design.path <- NA
init.design.func = "spotCreateDesignLhd";
init.design.size = 10;    # number of initial design points
init.design.repeats = 1;  # number of initial repeats


##########################################################
# STEP sequential
###########################################################
## spotStepSequential uses: 
## Function to merge data
seq.merge.func <- mean;

# /WK/ without these lines the defaults are  seq.design.size=10000 and seq.design.retries=100, which lasts **VERY** long
seq.design.size = 100;
seq.design.retries = 15;

# Max number of repeats for the same design points:
seq.design.maxRepeats = 3;

## how many old (best) points shall be repeated 
seq.design.oldBest.size <- 1;
## how many new points shall be added 
seq.design.new.size <- 3;

# crazy Kriging function using nugget estimation
seq.predictionModel.func = "spotPredictMlegp";      # good working Kriging version  (but only for up to ~200 evals)
#seq.predictionModel.func = "spotPredictGausspr";
#seq.predictionModel.func = "spotPredictRandomForest";

##########################################################
# STEP report
###########################################################
report.func = "spotReportSens" # "spotReport3d" #   
