# Experimental research in evolutionary computation
# author: thomas.bartz-beielstein@fh-koeln.de
# http://www.springer.com/3-540-32026-1
#
# Copyright (C) 2009 T. Bartz-Beielstein and C. Lasarczyk
# This program is free software;
# you can redistribute it and/or modify it under the terms of the 
# GNU General Public License as published by the Free Software Foundation; 
# either version 3 of the License,
# or (at your option) any later version.
# This program is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
# See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along
#  with this program; if not, see <http://www.gnu.org/licenses/>.
#
###########################################################
# SPOT configuration file
# Settings from this file overwrite default settings specified in 
# spotGetOptions.R
###########################################################
# Part I:  Algorithm dependent settings
# 
###########################################################
###########################################################
##
## Specify language of algorithm to be tuned, 
## this defines how the alg.func will be interpreted
## Type: STRING:
## Can be one of the following:
## 1) sourceR, i.e., R script to be called {this leads to: source(paste("alg.func",".R",sep="")) }
## 2) unixSh, i.e., unix Shell script, to be called by {this leads to: system("alg.func") }
alg.language = "sourceR"

## to specify the additional R source file for the algorithm 
## two information my be given: the path to the R-file
## and the functionname. The R-file now
## 1) MUST be located in the directory given (alg.path) - default is srcPath
## 2) MUST have the same name as the function (PLUS the extension ".R")
## 3) MUST be given in alg.func
## Type: STRING:
## This R script will be sourced by source(paste(alg.path,alg.func,sep="/"))
alg.path="."

## Specify name of the algorithm to be tuned.
## Type: STRING
## This can be:
## 1) an R function (requires additional R source file(s)!)
## 2) a shell script (Unix)
## 3) a .bat file (Win)
alg.func = "tdmStartSpot"

## Column name containing results
alg.resultColumn = "Y"
## seed setting for to be used in the users algorithm
alg.seed = 1235

## Specify APD-File (Algorithm Problem Definition), 
## Default algorithm design and problem design related information is stored here.
## This configuration file is probably necessary for the user written algorithm. 
##  Type: STRING:
## The idea is, that some of the parameters that are specified in the .apd file 
## are the ones, that are to be tuned by SPOT, and therefore be written from SPOT in the
## .des file, the "dynamic" input for the algorithm (e.g., population size).
## The specification of which parameters are to be tuned must be
## provided by the .roi file. The default filenames for .apd, .roi, .bst, .des, .res  and .pdf 
## are generated generated by adding the extensions to the prefix of this .conf file.
## If there is any reason, the user may change the names to whatever he wants, but
## then he also must give the correct path to those files. (the path must be relative to this configuration file)
## The names of the variables are very generic too: <extension>FileName. See example with apd below 
io.apdFileName = "sonar_02.apd"
io.roiFileName = "sonar_02.roi"


##########################################################
# SPOT Global parameter
###########################################################
spot.ocba = F; spot.seed = 120 # 125
#io.columnSep = "";     # /WK/ changed from columnSep = " ", which may give problems when reading ROI-file with more than one whitespace as separator
io.verbosity = 3;       # =3 print much & do updating graphics, =0: print (nearly) nothing


###########################################################
# Part II: SPOT Steps related
##########################################################
# STEP auto
###########################################################
# used in spotStepAuto:
auto.loop.steps = 4;     # number of spot metamodels to be generated 
auto.loop.nevals = Inf;   # concurrently, max number of algo evaluations may be specified

##########################################################
# STEP initial
###########################################################
# JZ: used by spotStepInitial to create an initial design
# expected a function name that also exists as R-filename
#init.design.path <- NA
init.design.func = "spotCreateDesignLhd";
init.design.size = 10;    # number of initial design points
init.design.repeats = 1;  # number of initial repeats


##########################################################
# STEP sequential
###########################################################
## spotStepSequential uses: 
## Function to merge data
seq.merge.func <- mean;

# /WK/ without these lines the defaults are  seq.design.size=10000 and seq.design.retries=100, which lasts **VERY** long
seq.design.size = 100;
seq.design.retries = 15;

# Max number of repeats for the same design points:
seq.design.maxRepeats = 2;

## how many old (best) points shall be repeated 
seq.design.oldBest.size <- 1;
## how many new points shall be added 
seq.design.new.size <- 3;

#seq.predictionModel.func = "spotPredictMlegp";      # good working Kriging version  (but only for up to ~200 evals)
#seq.predictionModel.func = "spotPredictTree";
seq.predictionModel.func = "spotPredictRandomForest";

##########################################################
# STEP report
###########################################################
report.func = "spotReportSens"
