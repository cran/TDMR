## Specify name of the algorithm to be tuned.
alg.func = "tdmStartSpot"

## Column name containing results
alg.resultColumn = "Y"
## seed setting for to be used in the users algorithm
alg.seed = 1235

## Specify APD-File (Algorithm Problem Definition), ROI-File (Region Of Interest)
io.apdFileName = "sonar_02.apd"
io.roiFileName = "sonar_02.roi"


##########################################################
# SPOT Global parameter
###########################################################
spot.ocba = F; spot.seed = 120 # 125
#io.columnSep = "";     # /WK/ changed from columnSep = " ", which may give problems when reading ROI-file with more than one whitespace as separator
io.verbosity = 3;       # =3 print much & do updating graphics, =0: print (nearly) nothing


###########################################################
# Part II: SPOT Steps related
##########################################################
# STEP auto
###########################################################
# used in spotStepAuto:
auto.loop.steps = 4;     # number of spot metamodels to be generated 
auto.loop.nevals = Inf;   # concurrently, max number of algo evaluations may be specified

##########################################################
# STEP initial
###########################################################
# JZ: used by spotStepInitial to create an initial design
# expected a function name that also exists as R-filename
#init.design.path <- NA
init.design.func = "spotCreateDesignLhd";
init.design.size = 10;    # number of initial design points
init.design.repeats = 1;  # number of initial repeats


##########################################################
# STEP sequential
###########################################################
## spotStepSequential uses: 
## Function to merge data
seq.merge.func <- mean;

# /WK/ without these lines the defaults are  seq.design.size=10000 and seq.design.retries=100, which lasts **VERY** long
seq.design.size = 100;
seq.design.retries = 15;

# Max number of repeats for the same design points:
seq.design.maxRepeats = 2;

## how many old (best) points shall be repeated 
seq.design.oldBest.size <- 1;
## how many new points shall be added 
seq.design.new.size <- 3;

#seq.predictionModel.func = "spotPredictMlegp";      # good working Kriging version  (but only for up to ~200 evals)
#seq.predictionModel.func = "spotPredictTree";
seq.predictionModel.func = "spotPredictRandomForest";

##########################################################
# STEP report
###########################################################
report.func = "spotReportSens"
